function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 10-Feb-2020 14:44:02.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1.81;25.36;992.89;25.56];
x1_step1.gain = [0.056657223796034;0.0355871886120996;0.0494926998267756;0.0268096514745308];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.93797260640646329399;-2.0590993964820532014;-0.85175732053478658834;0.48079158948502187521;-0.62867007449026290899;0.36529639535009655882;-1.5264361037851212899;-2.1037300010407888884;-2.1308742264882596373;4.3333209379469694866];
IW1_1 = [0.047022097348315750054 -0.96601915503575908062 -3.4530546517420357411 0.082773211773009780501;0.98596237631176153471 0.88896696990330070776 1.6208985475410859767 2.6174882825446816881;0.4563984464092836757 -1.897210027424414136 2.3188906397955189043 -2.2188067744874495624;1.1867746486242674031 3.9115139682802264609 2.657637400227935931 0.43138425780225936323;1.9826580112145177903 0.34211361868282197385 -0.95242200537253485226 0.086682996375864448946;0.57844533674105369503 1.8454973620007244506 0.80409724123499148885 0.54361014241526961488;-3.1398564555071097892 0.34806031477773735627 0.39958643044097164054 -0.23916889029259147392;-2.965484010453756536 0.10564884733643806203 -0.34204132449370105995 2.0517958746268911696;0.26557029548807398189 0.41744453625077093673 -2.8188335832536624004 2.3783829267266689556;2.8822362521584445894 3.6167203902221474188 0.98408696991016875177 -0.96915862416015863268];

% Layer 2
b2 = -0.028272204156990096702;
LW2_1 = [-0.088766017598531921085 -0.11170895864722750479 -0.069949935619535524856 0.17344765974580361734 -0.30719008021657151497 -0.46231483943793760805 0.28833414957926817301 0.10809338018429480444 0.064174983864718690429 0.10374656870884162163];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0264900662251656;
y1_step1.xoffset = 420.26;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
